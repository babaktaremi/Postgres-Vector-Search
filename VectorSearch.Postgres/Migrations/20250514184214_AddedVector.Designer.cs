// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Pgvector;
using VectorSearch.Postgres.Context;

#nullable disable

namespace VectorSearch.Postgres.Migrations
{
    [DbContext(typeof(MoviesDbContext))]
    [Migration("20250514184214_AddedVector")]
    partial class AddedVector
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "kind", new[] { "movie", "series", "season", "episode", "movieseries" });
            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "tsm_system_rows");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("VectorSearch.Postgres.Migrations.Movie", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<decimal?>("Budget")
                        .HasColumnType("numeric")
                        .HasColumnName("budget");

                    b.Property<DateOnly?>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<string>("Homepage")
                        .HasColumnType("text")
                        .HasColumnName("homepage");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<long?>("ParentId")
                        .HasColumnType("bigint")
                        .HasColumnName("parent_id");

                    b.Property<decimal?>("Revenue")
                        .HasColumnType("numeric")
                        .HasColumnName("revenue");

                    b.Property<int?>("Runtime")
                        .HasColumnType("integer")
                        .HasColumnName("runtime");

                    b.Property<long?>("SeriesId")
                        .HasColumnType("bigint")
                        .HasColumnName("series_id");

                    b.Property<decimal?>("VoteAverage")
                        .HasColumnType("numeric")
                        .HasColumnName("vote_average");

                    b.Property<long?>("VotesCount")
                        .HasColumnType("bigint")
                        .HasColumnName("votes_count");

                    b.HasKey("Id")
                        .HasName("movies_pkey");

                    b.HasIndex("ParentId");

                    b.HasIndex("SeriesId");

                    b.ToTable("movies", (string)null);
                });

            modelBuilder.Entity("VectorSearch.Postgres.Migrations.MovieAbstractsEn", b =>
                {
                    b.Property<long>("MovieId")
                        .HasColumnType("bigint")
                        .HasColumnName("movie_id");

                    b.Property<string>("Abstract")
                        .HasColumnType("text")
                        .HasColumnName("abstract");

                    b.Property<Vector>("Embedding")
                        .HasColumnType("vector");

                    b.HasKey("MovieId")
                        .HasName("movie_abstracts_en_pkey");

                    b.ToTable("movie_abstracts_en", (string)null);
                });

            modelBuilder.Entity("VectorSearch.Postgres.Migrations.Movie", b =>
                {
                    b.HasOne("VectorSearch.Postgres.Migrations.Movie", "Parent")
                        .WithMany("InverseParent")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("movies_parent_id_fkey");

                    b.HasOne("VectorSearch.Postgres.Migrations.Movie", "Series")
                        .WithMany("InverseSeries")
                        .HasForeignKey("SeriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("movies_series_id_fkey");

                    b.Navigation("Parent");

                    b.Navigation("Series");
                });

            modelBuilder.Entity("VectorSearch.Postgres.Migrations.MovieAbstractsEn", b =>
                {
                    b.HasOne("VectorSearch.Postgres.Migrations.Movie", "Movie")
                        .WithOne("MovieAbstractsEn")
                        .HasForeignKey("VectorSearch.Postgres.Migrations.MovieAbstractsEn", "MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("movie_abstracts_en_movie_id_fkey");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("VectorSearch.Postgres.Migrations.Movie", b =>
                {
                    b.Navigation("InverseParent");

                    b.Navigation("InverseSeries");

                    b.Navigation("MovieAbstractsEn");
                });
#pragma warning restore 612, 618
        }
    }
}
